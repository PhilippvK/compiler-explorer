#[version = "0.0.5"]
def @main(%input_1: Tensor[(1, 640), int8] /* ty=Tensor[(1, 640), int8] span=from_string:3:16 */, %v_param_1: Tensor[(128, 640), int8] /* ty=Tensor[(128, 640), int8] span=from_string:4:22 */, %v_param_2: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:5:24 */, %v_param_3: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:9:22 */, %v_param_4: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:10:24 */, %v_param_5: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:14:24 */, %v_param_6: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:15:26 */, %v_param_7: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:19:24 */, %v_param_8: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:20:26 */, %v_param_9: Tensor[(8, 128), int8] /* ty=Tensor[(8, 128), int8] span=from_string:24:24 */, %v_param_10: Tensor[(8), int32] /* ty=Tensor[(8), int32] span=from_string:25:26 */, %v_param_11: Tensor[(128, 8), int8] /* ty=Tensor[(128, 8), int8] span=from_string:29:24 */, %v_param_12: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:30:26 */, %v_param_13: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:34:24 */, %v_param_14: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:35:26 */, %v_param_15: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:39:24 */, %v_param_16: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:40:26 */, %v_param_17: Tensor[(128, 128), int8] /* ty=Tensor[(128, 128), int8] span=from_string:44:24 */, %v_param_18: Tensor[(128), int32] /* ty=Tensor[(128), int32] span=from_string:45:26 */, %v_param_19: Tensor[(640, 128), int8] /* ty=Tensor[(640, 128), int8] span=from_string:49:24 */, %v_param_20: Tensor[(640), int32] /* ty=Tensor[(640), int32] span=from_string:50:26 */, output_tensor_names=["Identity"]) -> Tensor[(1, 640), int8] {
  %0 = reshape(%input_1, newshape=[-1, 640]) /* ty=Tensor[(1, 640), int8] span=from_string:4:18 */;
  %1 = qnn.dense(%0, %v_param_1, 89 /* ty=int32 span=from_string:4:36 */, 0 /* ty=int32 span=from_string:4:39 */, 0.391015f /* ty=float32 span=from_string:4:50 */, 0.000376875f /* ty=float32 span=from_string:4:64 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:5:20 */;
  %2 = nn.bias_add(%1, %v_param_2) /* ty=Tensor[(1, 128), int32] span=from_string:6:23 */;
  %3 = qnn.requantize(%2, 0.000147364f /* ty=float32 span=from_string:6:39 */, 0 /* ty=int32 span=from_string:6:42 */, 0.0494591f /* ty=float32 span=from_string:6:54 */, -128 /* ty=int32 span=from_string:6:60 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:7:13 */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:8:16 */;
  %5 = reshape(%4, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:9:18 */;
  %6 = qnn.dense(%5, %v_param_3, -128 /* ty=int32 span=from_string:9:38 */, 0 /* ty=int32 span=from_string:9:41 */, 0.0494591f /* ty=float32 span=from_string:9:53 */, 0.0150283f /* ty=float32 span=from_string:9:65 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:10:20 */;
  %7 = nn.bias_add(%6, %v_param_4) /* ty=Tensor[(1, 128), int32] span=from_string:11:23 */;
  %8 = qnn.requantize(%7, 0.000743288f /* ty=float32 span=from_string:11:39 */, 0 /* ty=int32 span=from_string:11:42 */, 0.0354057f /* ty=float32 span=from_string:11:54 */, -128 /* ty=int32 span=from_string:11:60 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:12:13 */;
  %9 = clip(%8, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:13:17 */;
  %10 = reshape(%9, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:14:19 */;
  %11 = qnn.dense(%10, %v_param_5, -128 /* ty=int32 span=from_string:14:40 */, 0 /* ty=int32 span=from_string:14:43 */, 0.0354057f /* ty=float32 span=from_string:14:55 */, 0.0535004f /* ty=float32 span=from_string:14:67 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:15:21 */;
  %12 = nn.bias_add(%11, %v_param_6) /* ty=Tensor[(1, 128), int32] span=from_string:16:24 */;
  %13 = qnn.requantize(%12, 0.00189422f /* ty=float32 span=from_string:16:40 */, 0 /* ty=int32 span=from_string:16:43 */, 0.0137307f /* ty=float32 span=from_string:16:55 */, -128 /* ty=int32 span=from_string:16:61 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:17:14 */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:18:17 */;
  %15 = reshape(%14, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:19:19 */;
  %16 = qnn.dense(%15, %v_param_7, -128 /* ty=int32 span=from_string:19:40 */, 0 /* ty=int32 span=from_string:19:43 */, 0.0137307f /* ty=float32 span=from_string:19:55 */, 0.0720354f /* ty=float32 span=from_string:19:67 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:20:21 */;
  %17 = nn.bias_add(%16, %v_param_8) /* ty=Tensor[(1, 128), int32] span=from_string:21:24 */;
  %18 = qnn.requantize(%17, 0.0009891f /* ty=float32 span=from_string:21:39 */, 0 /* ty=int32 span=from_string:21:42 */, 0.0236038f /* ty=float32 span=from_string:21:54 */, -128 /* ty=int32 span=from_string:21:60 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:22:14 */;
  %19 = clip(%18, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:23:17 */;
  %20 = reshape(%19, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:24:19 */;
  %21 = qnn.dense(%20, %v_param_9, -128 /* ty=int32 span=from_string:24:40 */, 0 /* ty=int32 span=from_string:24:43 */, 0.0236038f /* ty=float32 span=from_string:24:55 */, 0.00834463f /* ty=float32 span=from_string:24:68 */, units=8, out_dtype="int32") /* ty=Tensor[(1, 8), int32] span=from_string:25:21 */;
  %22 = nn.bias_add(%21, %v_param_10) /* ty=Tensor[(1, 8), int32] span=from_string:26:24 */;
  %23 = qnn.requantize(%22, 0.000196965f /* ty=float32 span=from_string:26:41 */, 0 /* ty=int32 span=from_string:26:44 */, 0.0249295f /* ty=float32 span=from_string:26:56 */, -128 /* ty=int32 span=from_string:26:62 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 8), int8] span=from_string:27:14 */;
  %24 = clip(%23, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8), int8] span=from_string:28:17 */;
  %25 = reshape(%24, newshape=[-1, 8]) /* ty=Tensor[(1, 8), int8] span=from_string:29:19 */;
  %26 = qnn.dense(%25, %v_param_11, -128 /* ty=int32 span=from_string:29:41 */, 0 /* ty=int32 span=from_string:29:44 */, 0.0249295f /* ty=float32 span=from_string:29:56 */, 0.0267345f /* ty=float32 span=from_string:29:68 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:30:21 */;
  %27 = nn.bias_add(%26, %v_param_12) /* ty=Tensor[(1, 128), int32] span=from_string:31:24 */;
  %28 = qnn.requantize(%27, 0.000666477f /* ty=float32 span=from_string:31:41 */, 0 /* ty=int32 span=from_string:31:44 */, 0.0317562f /* ty=float32 span=from_string:31:56 */, -128 /* ty=int32 span=from_string:31:62 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:32:14 */;
  %29 = clip(%28, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:33:17 */;
  %30 = reshape(%29, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:34:19 */;
  %31 = qnn.dense(%30, %v_param_13, -128 /* ty=int32 span=from_string:34:41 */, 0 /* ty=int32 span=from_string:34:44 */, 0.0317562f /* ty=float32 span=from_string:34:56 */, 0.0193354f /* ty=float32 span=from_string:34:68 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:35:21 */;
  %32 = nn.bias_add(%31, %v_param_14) /* ty=Tensor[(1, 128), int32] span=from_string:36:24 */;
  %33 = qnn.requantize(%32, 0.000614019f /* ty=float32 span=from_string:36:41 */, 0 /* ty=int32 span=from_string:36:44 */, 0.0320712f /* ty=float32 span=from_string:36:56 */, -128 /* ty=int32 span=from_string:36:62 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:37:14 */;
  %34 = clip(%33, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:38:17 */;
  %35 = reshape(%34, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:39:19 */;
  %36 = qnn.dense(%35, %v_param_15, -128 /* ty=int32 span=from_string:39:41 */, 0 /* ty=int32 span=from_string:39:44 */, 0.0320712f /* ty=float32 span=from_string:39:56 */, 0.0128027f /* ty=float32 span=from_string:39:68 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:40:21 */;
  %37 = nn.bias_add(%36, %v_param_16) /* ty=Tensor[(1, 128), int32] span=from_string:41:24 */;
  %38 = qnn.requantize(%37, 0.000410599f /* ty=float32 span=from_string:41:41 */, 0 /* ty=int32 span=from_string:41:44 */, 0.028296f /* ty=float32 span=from_string:41:55 */, -128 /* ty=int32 span=from_string:41:61 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:42:14 */;
  %39 = clip(%38, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:43:17 */;
  %40 = reshape(%39, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:44:19 */;
  %41 = qnn.dense(%40, %v_param_17, -128 /* ty=int32 span=from_string:44:41 */, 0 /* ty=int32 span=from_string:44:44 */, 0.028296f /* ty=float32 span=from_string:44:55 */, 0.00704988f /* ty=float32 span=from_string:44:68 */, units=128, out_dtype="int32") /* ty=Tensor[(1, 128), int32] span=from_string:45:21 */;
  %42 = nn.bias_add(%41, %v_param_18) /* ty=Tensor[(1, 128), int32] span=from_string:46:24 */;
  %43 = qnn.requantize(%42, 0.000199483f /* ty=float32 span=from_string:46:41 */, 0 /* ty=int32 span=from_string:46:44 */, 0.0247909f /* ty=float32 span=from_string:46:56 */, -128 /* ty=int32 span=from_string:46:62 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 128), int8] span=from_string:47:14 */;
  %44 = clip(%43, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128), int8] span=from_string:48:17 */;
  %45 = reshape(%44, newshape=[-1, 128]) /* ty=Tensor[(1, 128), int8] span=from_string:49:19 */;
  %46 = qnn.dense(%45, %v_param_19, -128 /* ty=int32 span=from_string:49:41 */, 0 /* ty=int32 span=from_string:49:44 */, 0.0247909f /* ty=float32 span=from_string:49:56 */, 0.0195567f /* ty=float32 span=from_string:49:68 */, units=640, out_dtype="int32") /* ty=Tensor[(1, 640), int32] span=from_string:50:21 */;
  %47 = nn.bias_add(%46, %v_param_20) /* ty=Tensor[(1, 640), int32] span=from_string:51:18 */;
  qnn.requantize(%47, 0.000484828f /* ty=float32 span=from_string:51:35 */, 0 /* ty=int32 span=from_string:51:38 */, 0.364498f /* ty=float32 span=from_string:51:49 */, 96 /* ty=int32 span=from_string:51:53 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 640), int8] span=from_string:3:3 */
}
